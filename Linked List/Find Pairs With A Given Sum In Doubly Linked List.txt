C++ Solution

/****************************************************************

    Following is the class structure of the Node class:

    class Node
    {
    public:
        int data;
        Node *next;
        Node *prev;
        Node(int data)
        {
            this->data = data;
            this->next = NULL;
            this->prev = NULL;
        }
    };

*****************************************************************/

bool findPair(Node* head, int k)
{
    // Write your code here.
    Node *left = head, *right = head;
    while(right -> next){
        right = right -> next;
    }
    
    while(left != right && right -> next != left){
        if((left -> data + right -> data) == k){
            return true;
        }
        else{
            if((left -> data + right -> data) < k){
                left = left -> next;
            }
            else{
                right = right -> prev;
            }
        }
    }
    
    return false;
}




Java Solution

/****************************************************************

    Following is the class structure of the Node class:

      class Node<T> {
        T data;
        Node<T> next;
        Node<T> prev;

        public Node(T data) {
            this.data = data;
        }
    }

*****************************************************************/

public class Solution {

    public static boolean findPair(Node<Integer> head, int k) {
        // Write your code here.
        Node<Integer> left = head, right = head;
        while(right.next != null){
            right = right.next;
        }
        
        while(left != right && right.next != left){
            if((left.data + right.data) == k){
                return true;
            }
   			else {
                if((left.data + right.data) < k){
                    left = left.next;
                }
                else{
                    right = right.prev;
                }
            }
        }
        
        return false;
    }

}
