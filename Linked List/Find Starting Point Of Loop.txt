C++ Solution

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        
        ListNode *slow = head, *fast = head;
        
        while(slow && fast && fast -> next){
            
            slow = slow -> next;
            fast = fast -> next -> next;
            
            if(slow == fast){
                slow = head;
                if(slow != fast){
                    while(slow -> next != fast -> next){
                        slow = slow -> next;
                        fast = fast -> next;
                    }  
                }
                else{
                    while(fast -> next != slow){
                        fast = fast -> next;
                    }
                }
                return fast -> next;
            }
            
        }
        
        return NULL;
    }
};

Java Solution

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        
        ListNode slow = head, fast = head;
        
        while(slow != null && fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
            if(slow == fast){
                slow = head;
                int i = 0;
                if(slow != fast){
                   while(fast.next != slow.next){
                       fast = fast.next;
                       slow = slow.next;
                       i++;
                   } 
                }
                else{
                    while(fast.next != slow){
                        fast = fast.next;
                        i++;
                    }
                }
                return fast.next;
            }
        }
        
        return null;
    }
}