C++ Solution

/***********************************************

    Following is the class structure of the Node class:

    class DLLNode
    {
        public:
        int data;
        DLLNode *next;
        DLLNode *prev;
    };

***********************************************/

int countPairs(DLLNode *left, DLLNode *right, int x){
    int pairs = 0;
    while((left != right) && (right -> next != left)){
        if((left -> data + right -> data) == x){
            pairs += 1;
            left = left -> next;
            right = right -> prev;
        }
        else{
            if((left -> data + right -> data) < x){
                left = left -> next;
            }
            else{
                right = right -> prev;
            }
        }
    }
    
    return pairs;
}

int countTriplets(DLLNode* head, int x)
{
    // WRITE YOUR CODE HERE
    	DLLNode *left = NULL, *right = head, *curr = head;
        while(right -> next){
            right = right -> next;
        }
        
        int triplets = 0;
        while(curr){
            left = curr -> next;
            triplets += countPairs(left, right, x - (curr -> data));
            curr = curr -> next;
        }
        
        return triplets;
}  


Java Solution

/****************************************************************

        Following is the class structure of the Node class:

        class DLLNode
        {
         	int data;
        	DLLNode next;
       		DLLNode prev;
        }

*****************************************************************/



public class Solution {
    
    public static int countPairs(DLLNode left, DLLNode right, int x){
        int pairs = 0;
        while(left != right && right.next != left){
            if((left.data + right.data) == x){
                pairs += 1;
                left = left.next;
                right = right.prev;
            }
            else{
                if((left.data + right.data) < x){
                    left = left.next;
                }
                else{
                    right = right.prev;
                }
            }
        }
        return pairs;
    }
    
    public static int countTriplets(DLLNode head,int x){
        // Write your code here
        DLLNode left = null, right = head, curr = head;
        while(right.next != null){
            right = right.next;
        }
        
        int triplets = 0;
        while(curr != null){
            left = curr.next;
            triplets += countPairs(left, right, x - (curr.data));
            curr = curr.next;
        }
        
        return triplets;
    }
}