C++ Solution

// driver

#include <bits/stdc++.h>
using namespace std;

/* Linked list Node */
struct Node {
    int data;
    struct Node* next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};

struct Node* buildList(int size)
{
    int val;
    cin>> val;
    
    Node* head = new Node(val);
    Node* tail = head;
    
    for(int i=0; i<size-1; i++)
    {
        cin>> val;
        tail->next = new Node(val);
        tail = tail->next;
    }
    
    return head;
}

void printList(Node* n)
{
    while(n)
    {
        cout<< n->data << " ";
        n = n->next;
    }
    cout<< endl;
}


 // } Driver Code Ends
/* node for linked list:

struct Node {
    int data;
    struct Node* next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};

*/

class Solution
{
    public:
    //Function to add two numbers represented by linked list.
    // SOLUTION STARTS HERE
    struct Node* reverse(Node *head){
        Node *prev = NULL, *next = NULL, *curr = head;
        while(curr){
            next = curr -> next;
            curr -> next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
    
    struct Node* addTwoLists(struct Node* first, struct Node* second)
    {
        // code here
        first = reverse(first);
        second = reverse(second);
        int carry = 0;
        struct Node *fp = first, *sp = second, *addedListHead = new Node(-1);
        struct Node *addedList = addedListHead;
        
        while(fp || sp || carry){
            
            if(fp){
                carry += fp -> data;
                fp = fp -> next;
            }
            if(sp){
                carry += sp -> data;
                sp = sp -> next;
            }
            
            addedList -> next = new Node(carry % 10);
            addedList = addedList -> next;
            carry = carry / 10;
        }
        
        addedListHead = addedListHead -> next;
        addedListHead = reverse(addedListHead);
        return addedListHead;
    }
    // SOLUTION ENDS HERE
};


// { Driver Code Starts.

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n, m;
        
        cin>>n;
        Node* first = buildList(n);
        
        cin>>m;
        Node* second = buildList(m);
        Solution ob;
        Node* res = ob.addTwoLists(first,second);
        printList(res);
    }
    return 0;
}
  // } Driver Code Ends


Java Solution


import java.util.*;

class Node {
    int data;
    Node next;

    Node(int d) {
        data = d;
        next = null;
    }
}

class GfG{
    
    static void printList(Node n){
        while(n!=null){
            System.out.print(n.data+" ");
            n = n.next;
        }
        System.out.println();
    }
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        
        while (T-- > 0) {
            
            int n = sc.nextInt();
            int val = sc.nextInt();
            
            Node first = new Node(val);
            Node tail = first;
            for(int i=0; i<n-1; i++)
            {
                val = sc.nextInt();
                tail.next = new Node(val);
                tail = tail.next;
            }
            
            int m = sc.nextInt();
            val = sc.nextInt();
            
            Node second = new Node(val);
            tail = second;
            for(int i=0; i<m-1; i++)
            {
                val = sc.nextInt();
                tail.next = new Node(val);
                tail = tail.next;
            }
            
            Solution g = new Solution();
            Node res = g.addTwoLists(first, second);
            printList(res);
        }
    }
}
// } Driver Code Ends


/* node for linked list

class Node {
    int data;
    Node next;

    Node(int d) {
        data = d;
        next = null;
    }
}

*/

class Solution{
    //Function to add two numbers represented by linked list.
    //SOLUTION STARTS HERE
    public static Node reverse(Node head){
        Node prev = null, next = null, curr = head;
        while(curr != null){
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
    
    static Node addTwoLists(Node first, Node second){
        // code here
        // return head of sum list
        first = reverse(first);
        second = reverse(second);
        int carry = 0;
        Node fp = first, sp = second, addedListHead = new Node(-1);
        Node addedList = addedListHead;
        
        while(fp != null || sp != null || carry > 0){
            
            if(fp != null){
                carry += fp.data;
                fp = fp.next;
            }
            if(sp != null){
                carry += sp.data;
                sp = sp.next;
            }
            
            addedList.next = new Node(carry % 10);
            addedList = addedList.next;
            
            carry = carry / 10;
        }
        addedListHead = addedListHead.next;
        addedListHead = reverse(addedListHead);
        return addedListHead;
    }
    // SOLUTION ENDS HERE
}