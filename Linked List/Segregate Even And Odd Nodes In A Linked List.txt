C++ Solution

//Initial template for C++

#include <bits/stdc++.h>
using namespace std;

struct Node
{
    int data;
    struct Node* next;
    
    Node(int x){
        data = x;
        next = NULL;
    }
};
void printList(Node* node) 
{ 
    while (node != NULL) { 
        cout << node->data <<" "; 
        node = node->next; 
    }  
    cout<<"\n";
} 


 // } Driver Code Ends
//User function template for C++

/*
struct Node
{
    int data;
    struct Node* next;
    
    Node(int x){
        data = x;
        next = NULL;
    }
};
*/
class Solution{
public:
    Node* divide(int N, Node *head){
        // code here
        Node *oddHead = NULL, *oddEnd = NULL, *evenHead = NULL, *evenEnd = NULL;
        Node *curr = head;
        
        while(curr){
            
            if((curr -> data) % 2){
                if(oddHead){
                    oddEnd -> next = curr;
                    oddEnd = oddEnd -> next;
                }
                else{
                    oddEnd = curr;
                    oddHead = oddEnd;
                }
            }
            else{
                if(evenHead){
                    evenEnd -> next = curr;
                    evenEnd = evenEnd -> next;
                }
                else{
                    evenEnd = curr;
                    evenHead = evenEnd;
                }
            }
            
            curr = curr -> next;
        }
        
        if(!evenHead){
            return oddHead;
        }
        if(!oddHead){
            return evenHead;
        }
        
        oddEnd -> next = NULL;
        evenEnd -> next = oddHead;
        
        return curr = evenHead;
    }
};

// { Driver Code Starts.

int main() {
    //code
    int t;
    cin>>t;
    while(t--){
        int N;
        cin>>N;
        int data;
        cin>>data;
        struct Node *head = new Node(data);
        struct Node *tail = head;
        for (int i = 0; i < N-1; ++i)
        {
            cin>>data;
            tail->next = new Node(data);
            tail = tail->next;
        }
        
        Solution ob;
        Node *ans = ob.divide(N, head);
        printList(ans); 
    }
    return 0;
}
  // } Driver Code Ends


Java Solution

// Initial Template for Java

import java.util.*;
import java.io.*;

class FastReader{ 
    BufferedReader br; 
    StringTokenizer st; 

    public FastReader(){ 
        br = new BufferedReader(new InputStreamReader(System.in)); 
    } 

    String next(){ 
        while (st == null || !st.hasMoreElements()){ 
            try{ st = new StringTokenizer(br.readLine()); } catch (IOException  e){ e.printStackTrace(); } 
        } 
        return st.nextToken(); 
    } 

    String nextLine(){ 
        String str = ""; 
        try{ str = br.readLine(); } catch (IOException e) { e.printStackTrace(); } 
        return str; 
    } 
    
    Integer nextInt(){
        return Integer.parseInt(next());
    }
} 

class Node{
    int data;
    Node next;
    
    Node(int x){
        data = x;
        next = null;
    }
}
class GFG{
	static void printList(Node node, PrintWriter out) 
	{ 
		while (node != null) 
		{ 
			out.print(node.data + " "); 
			node = node.next; 
		} 
		out.println(); 
	}
    public static void main(String args[]) throws IOException { 
        FastReader sc = new FastReader();
        PrintWriter out = new PrintWriter(System.out);
        int t = sc.nextInt();
        while(t > 0){
        	int n = sc.nextInt();
            Node head = new Node(sc.nextInt());
            Node tail = head;
            for(int i=0; i<n-1; i++)
            {
                tail.next = new Node(sc.nextInt());
                tail = tail.next;
            }
            Solution ob = new Solution();
            Node ans = ob.divide(n, head);
            printList(ans, out); 
            t--;
        }
        out.flush();
    } 
} // } Driver Code Ends


//User function Template for Java

/* 
class Node{
    int data;
    Node next;
    
    Node(int x){
        data = x;
        next = null;
    }
}
*/

class Solution{
    Node divide(int N, Node head){
        // code here
        Node evenHead = null, oddHead = null, evenEnd = null, oddEnd = null;
        Node curr = head;
        
        while(curr != null){
            if((curr.data) % 2 == 1){
                if(oddHead == null){
                    oddEnd = curr;
                    oddHead = oddEnd;
                }
                else{
                    oddEnd.next = curr;
                    oddEnd = oddEnd.next;
                }
            }
            else{
                if(evenHead == null){
                    evenEnd = curr;
                    evenHead = evenEnd;
                }
                else{
                    evenEnd.next = curr;
                    evenEnd = evenEnd.next;
                }
            }
            
            curr = curr.next;
        }
        
        if(oddHead == null) return evenHead;
        if(evenHead == null) return oddHead;
        
        oddEnd.next = null;
        evenEnd.next = oddHead;
        
        return curr = evenHead;
    }
}