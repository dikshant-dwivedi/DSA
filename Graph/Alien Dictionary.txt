C++ Solution

// { Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
// User function Template for C++

class Solution{
    public:
    
    void dfs(int vtx, vector<int> graph[], vector<int> &visited, stack<int> &st){
        visited[vtx] = 1;
        for(auto neighbor: graph[vtx]){
            if(!visited[neighbor])
                dfs(neighbor, graph, visited, st);
        }
        st.push(vtx);
    }
    
    string topologicalSort(vector<int>graph[], int V){
        stack<int> st;
        vector<int> visited(V, 0);
        for(int i = 0; i < V; i++){
            if(!visited[i])
                dfs(i, graph, visited, st);
        }
        
        string order = "";
        while(!st.empty()){
            order += st.top() + 'a';
            st.pop();
        }
        
        return order;
    }
    
    string findOrder(string dict[], int n, int k) {
        //code here
        vector<int> graph[k];
        string s1, s2;
        /**
         * 0 maps to a
         * 1 maps to b
         * 2 maps to c
         * and so on
         * this is because k represents the first k characters of the standard dictionary
        */
        for(int i = 0; i < n-1; i++){
            int j = 0;
            s1 = dict[i], s2 = dict[i+1];
            while(j < s1.length() && j < s2.length()){
                /**
                 * An edge from a to b exists if a comes lexicographically before b in the alien
                 * dictionary. a maps to 0 index of graph and b maps to 1 index of graph which
                 * can be accessed using 'a' - 'a' = 0 and 'b' - 'a' = 1
                */
                if(s1[j] != s2[j]){
                    graph[s1[j] - 'a'].push_back(s2[j] - 'a');
                    break;
                }
                j++;
            }
        }
        
        string order = topologicalSort(graph, k);
        return order;
    }
};

// { Driver Code Starts.
string order;
bool f(string a, string b) {
    int p1 = 0;
    int p2 = 0;
    for (int i = 0; i < min(a.size(), b.size()) and p1 == p2; i++) {
        p1 = order.find(a[i]);
        p2 = order.find(b[i]);
        //	cout<<p1<<" "<<p2<<endl;
    }

    if (p1 == p2 and a.size() != b.size()) return a.size() < b.size();

    return p1 < p2;
}

// Driver program to test above functions
int main() {
    int t;
    cin >> t;
    while (t--) {
        int N, K;
        cin >> N >> K;
        string dict[N];
        for (int i = 0; i < N; i++) cin >> dict[i];
        
        Solution obj;
        string ans = obj.findOrder(dict, N, K);
        order = "";
        for (int i = 0; i < ans.size(); i++) order += ans[i];

        string temp[N];
        std::copy(dict, dict + N, temp);
        sort(temp, temp + N, f);

        bool f = true;
        for (int i = 0; i < N; i++)
            if (dict[i] != temp[i]) f = false;

        if(f)cout << 1;
        else cout << 0;
        cout << endl;
    }
    return 0;
}
  // } Driver Code Ends

Java Solution

// { Driver Code Starts
/*package whatever //do not write package name here */

import java.io.*;
import java.util.*;
import java.math.*;

class GFG {
	public static void main (String[] args) {
		Scanner sc = new Scanner(System.in);
		
		int t = Integer.parseInt(sc.next());
		while(t-- > 0)
		{
		    int n = Integer.parseInt(sc.next());
		    int k = Integer.parseInt(sc.next());
		    
		    String[] words = new String[n];
		    
		    for(int i=0;i<n;i++)
		    {
		        words[i] = sc.next();
		    }
		    
		    Solution ob = new Solution();
		  //  System.out.println(T.findOrder(words,k));
		    String order = ob.findOrder(words,n,k);
		    if(order.length() == 0){
		        System.out.println(0);
		        continue;
		    }
		    String temp[] = new String[n];
		    for(int i=0;i<n;i++)
		        temp[i] = words[i];
		    
		    Arrays.sort(temp, new Comparator<String>(){
		    
		      @Override
                public int compare(String a, String b) {
                    int index1 = 0;
                    int index2 = 0;
                    for(int i = 0; i < Math.min(a.length(), b.length()) 
                                        && index1 == index2; i++) {
                        index1 = order.indexOf(a.charAt(i));
                        index2 = order.indexOf(b.charAt(i));
                    }
                
                    if(index1 == index2 && a.length() != b.length()) 
                    {
                        if(a.length() < b.length())
                            return -1;
                        else
                            return 1;
                    }
                
                    if(index1 < index2)
                        return -1;
                    else
                        return 1;
                        
                }
		    });
		    
		    int flag = 1;
		    for(int i=0;i<n;i++)
		    {
		        if(!words[i].equals(temp[i]))
	            {
	                flag = 0;
	                break;
	            }
		    }
		    
		    System.out.println(flag);
		}
	}
	
}
// } Driver Code Ends


//User function Template for Java

class Solution
{
    
    public void dfs(int vtx, ArrayList<ArrayList<Integer>> graph, 
                    Stack<Integer> st, boolean visited[]){
        visited[vtx] = true;
        for(Integer neighbor : graph.get(vtx)){
            if(!visited[neighbor]){
                dfs(neighbor, graph, st, visited);
            }
        }
        st.add(vtx);
    }
    
    public String topologicalOrder(ArrayList<ArrayList<Integer>> graph, int V){
        Stack<Integer> st = new Stack<Integer>();
        boolean visited[] = new boolean[V];
        for(int i = 0; i < V; i++){
            if(!visited[i])
                dfs(i, graph, st, visited);
        }
        String order = "";
        while(!st.isEmpty()){
            order += (char)(st.pop() + 'a');
        }
        return order;
    }
    
    public String findOrder(String [] dict, int n, int K)
    {
        // Write your code here
        ArrayList<ArrayList<Integer>> graph  = new ArrayList<ArrayList<Integer>>();
        for(int i = 0; i < K; i++){
            graph.add(new ArrayList<Integer>());
        }
        
        String s1, s2;
        for(int i = 0; i < n-1; i++){
            s1 = dict[i];
            s2 = dict[i+1];
            int j = 0;
            while(j < s1.length() && j < s2.length()){
                if(s1.charAt(j) != s2.charAt(j)){
                    graph.get(s1.charAt(j) - 'a').add(s2.charAt(j) - 'a');
                    break;
                }
                j++;
            }
        }
        
        String order = topologicalOrder(graph, K);
        return order;
    }
}