C++ Solution

class Solution {
public:
    
    int dr[4] = {0, 0, 1, -1};
    int dc[4] = {1, -1, 0, 0};
    
    int orangesRotting(vector<vector<int>>& grid) {
        
        queue<pair<int, int>> q;
        int totalOranges = 0;
        
        for(int i = 0; i < grid.size(); i++){
            for(int j = 0; j < grid[0].size(); j++){
                if(grid[i][j] != 0) totalOranges++;
                if(grid[i][j] == 2) q.push({i, j});
            }
        }
        
        int rottenOranges = 0, minutes = 0;
        while(!q.empty()){
              
            int size = q.size();
            rottenOranges += size;
              
            if(rottenOranges == totalOranges) return minutes;
            
            for(int repeat = 0; repeat < size; repeat++){
                pair<int, int> p = q.front();
                q.pop();
                
                int i = p.first, j = p.second;
                int newi, newj;
                
                for(int k = 0; k < 4; k++){
                    newi = i + dr[k];
                    newj = j + dc[k]; 
                    if(newi >= 0 && newi < grid.size() &&
                       newj >= 0 && newj < grid[0].size() &&
                       grid[newi][newj] == 1){
                        grid[newi][newj] = 2;
                        q.push({newi, newj});
                    }   
                }
            }
            
            minutes++;
            
        }
        
        if(rottenOranges == totalOranges) return minutes;
        return -1;
    }
};

Java Solution

class Solution {
    
    int dr[] = {0, 0, 1, -1};
    int dc[] = {1, -1, 0, 0};
    
    public int orangesRotting(int[][] grid) {
        
        Queue<int []> q = new LinkedList<>();
        int totalOranges = 0;
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[0].length; j++){
                if(grid[i][j] != 0) totalOranges++;
                if(grid[i][j] == 2) q.offer(new int[]{i, j});
            }
        }   
        
        if(totalOranges == 0) return 0;
        
        int rottenOranges = 0, minutes = 0;
        while(!q.isEmpty()){
            int size = q.size();
            rottenOranges += size;
            
            if(rottenOranges == totalOranges) return minutes;
            
            for(int i = 0; i < size; i++){
                int p[] = q.poll();
                int r = p[0], c = p[1], newr, newc;
                for(int k = 0; k < 4; k++){
                    newr = r + dr[k];
                    newc = c + dc[k];
                    if(newr >= 0 && newc >= 0 &&
                      newr < grid.length && newc < grid[0].length &&
                      grid[newr][newc] == 1){
                        grid[newr][newc] = 2;
                        q.offer(new int[]{newr, newc});
                    }
                }
            }
            
            minutes++;
        }
        
        return -1;
    }
}