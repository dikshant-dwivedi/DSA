C++ Solution

// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
  public:
  
    int checkCycle(int node, vector<int> adj[], int visited[]){
        visited[node] = 1;
        queue<pair<int, int>> q;
        q.push({node, -1});
        
        int neighbour, parent;
        while(!q.empty()){
            int node = q.front().first;
            int parent = q.front().second;
            q.pop();
            
            for(int neighbour : adj[node]){
                if(!visited[neighbour]){
                    visited[neighbour] = 1;
                    q.push({neighbour, node});
                }
                else{
                    if(neighbour != parent){
                        return true;
                    }
                }
            }
        }
        return false;
    }
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        int visited[V] = {0};
        for(int i = 0; i < V; i++){
            if(!visited[i] && checkCycle(i, adj, visited)){
                return true;
            }
        }
        return false;
    }
};

// { Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >> E;
        vector<int> adj[V];
        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        Solution obj;
        bool ans = obj.isCycle(V, adj);
        if (ans)
            cout << "1\n";
        else
            cout << "0\n";
    }
    return 0;
}  // } Driver Code Ends

Java Solution

// { Driver Code Starts
import java.util.*;
import java.lang.*;
import java.io.*;
class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while (T-- > 0) {
            String[] s = br.readLine().trim().split(" ");
            int V = Integer.parseInt(s[0]);
            int E = Integer.parseInt(s[1]);
            ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
            for (int i = 0; i < V; i++) adj.add(i, new ArrayList<Integer>());
            for (int i = 0; i < E; i++) {
                String[] S = br.readLine().trim().split(" ");
                int u = Integer.parseInt(S[0]);
                int v = Integer.parseInt(S[1]);
                adj.get(u).add(v);
                adj.get(v).add(u);
            }
            Solution obj = new Solution();
            boolean ans = obj.isCycle(V, adj);
            if (ans)
                System.out.println("1");
            else
                System.out.println("0");
        }
    }
}// } Driver Code Ends

class Pair{
    int u;
    int p;
    Pair(int _u, int _p){
        u = _u;
        p = _p;
    }
}

class Solution {
    
    public boolean checkCycle(int node, ArrayList<ArrayList<Integer>> adj, boolean visited[]){
        visited[node] = true;
        Queue<Pair> q = new LinkedList<Pair>();
        q.add(new Pair(node, -1));
        while(!q.isEmpty()){
            int u = q.peek().u;
            int p = q.peek().p;
            q.poll();
            for(int neighbour : adj.get(u)){
                if(!visited[neighbour]){
                    visited[neighbour] = true;
                    q.add(new Pair(neighbour, u));
                }
                else{
                    if(p != neighbour){
                        return true;
                    }
                }
            }
        }
        return false;
    }
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        boolean[] visited = new boolean[V];
        for(int i = 0; i < V; i++){
            if(!visited[i] && checkCycle(i, adj, visited)){
                return true;
            }
        }
        return false;
    }
}