C++ Solution

// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
  public:
    
    int checkCycle(int node, vector<int> adj[], int visited[], int dfsVisited[]){
        visited[node] = 1, dfsVisited[node] = 1;
        for(int neighbour : adj[node]){
            if(!visited[neighbour]){
                if(checkCycle(neighbour, adj, visited, dfsVisited)) return true;
            }
            else{
                if(dfsVisited[neighbour]){
                    return true;
                }
            }
        }
        dfsVisited[node] = false;
        return false;
    }
  
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<int> adj[]) {
        // code here
        int visited[V] = {0}, dfsVisited[V] = {0};
        for(int i = 0; i < V; i++){
            if(!visited[i] && checkCycle(i, adj, visited, dfsVisited)){
                return true;
            }
        }
        return false;
    }
};

// { Driver Code Starts.

int main() {

    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;

        vector<int> adj[V];

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
        }

        Solution obj;
        cout << obj.isCyclic(V, adj) << "\n";
    }

    return 0;
}
  // } Driver Code Ends

Java Solution

// { Driver Code Starts
import java.util.*;
import java.io.*;
import java.lang.*;

class DriverClass {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- > 0) {
            ArrayList<ArrayList<Integer>> list = new ArrayList<>();
            int V = sc.nextInt();
            int E = sc.nextInt();
            for (int i = 0; i < V + 1; i++)
                list.add(i, new ArrayList<Integer>());
            for (int i = 0; i < E; i++) {
                int u = sc.nextInt();
                int v = sc.nextInt();
                list.get(u).add(v);
            }
            if (new Solution().isCyclic(V, list) == true)
                System.out.println("1");
            else
                System.out.println("0");
        }
    }
}// } Driver Code Ends


/*Complete the function below*/

class Solution {
    
    public boolean checkCycle(int node, ArrayList<ArrayList<Integer>> adj, boolean visited[], boolean dfsVisited[]){
        visited[node] = true;
        dfsVisited[node] = true;
        for(int neighbour : adj.get(node)){
            if(!visited[neighbour]){
                if(checkCycle(neighbour, adj, visited, dfsVisited)) 
                    return true;
            }
            else{
                if(dfsVisited[neighbour])
                    return true;
            }
        }
        dfsVisited[node] = false;
        return false;
    }
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        // code here
        boolean visited[] = new boolean[V];
        boolean dfsVisited[] = new boolean[V];
        for(int i = 0; i < V; i++){
            if(!visited[i] && checkCycle(i, adj, visited, dfsVisited)){
                return true;
            }
        }
        return false;
    }
}