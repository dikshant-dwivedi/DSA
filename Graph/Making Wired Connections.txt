C++ Solution

class Solution {
public:
    
    void dfs(int vtx, vector<vector<int>> &graph, vector<int> &visited){
        visited[vtx] = 1;
        for(auto neighbor : graph[vtx]){
            if(!visited[neighbor]){
                dfs(neighbor, graph, visited);
            }
        }
    }
    
    int makeConnected(int n, vector<vector<int>>& connections) {
        if(connections.size() < n-1){
            return -1;
        }
        vector<vector<int>> graph(n);
        for(int i = 0; i < connections.size(); i++){
            graph[connections[i][0]].push_back(connections[i][1]);
            graph[connections[i][1]].push_back(connections[i][0]);
        }
        vector<int> visited(n, 0);
        int components = 0;
        for(int i = 0; i < n; i++){
            if(!visited[i]){
                dfs(i, graph, visited);
                components++;
            }
        }
        return components - 1;
    }
};

Java Solution

class Solution {
    
    public void dfs(int vtx, ArrayList<ArrayList<Integer>> graph, boolean[] visited){
        visited[vtx] = true;
        for(int ng : graph.get(vtx)){
            if(!visited[ng]){
                dfs(ng, graph, visited);
            }
        }
    }
    
    public int makeConnected(int n, int[][] connections) {
        if(connections.length < n-1){
            return -1;
        }
        ArrayList<ArrayList<Integer>> graph = new ArrayList<ArrayList<Integer>>(n);
        for(int i = 0; i < n; i++){
            graph.add(new ArrayList<Integer>());
        }
        for(int i = 0; i < connections.length; i++){
            graph.get(connections[i][0]).add(connections[i][1]);
            graph.get(connections[i][1]).add(connections[i][0]);    
        }
        int components = 0;
        boolean visited[] = new boolean[n];
        Arrays.fill(visited, false);
        for(int i = 0; i < n; i++){
            if(!visited[i]){
                dfs(i, graph, visited);
                components++;
            }
        }
        return components - 1;
    }
}