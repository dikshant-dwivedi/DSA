striver(tuf) has nice video explanation
C++ Solution

// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
public:

    bool bfs(int v, vector<int> adj[], vector<int> &color){
        queue<int> q;
        
        color[v] = 1;
        q.push(v);
        
        int u;
        while(!q.empty()){
            u = q.front();
            q.pop();
            
            for(auto neighbor : adj[u]){
                if(color[neighbor] == -1){
                    color[neighbor] = 1 - color[u];
                    q.push(neighbor);
                }
                else{
                    if(color[neighbor] == color[u])
                        return false;
                }
            }
        }
        
        return true;
    }

	bool isBipartite(int V, vector<int>adj[]){
	    // Code here
	    vector<int> color(V, -1);
	    for(int i = 0; i < V; i++){
	        if(color[i] == -1){
	            if(!bfs(i, adj, color))
	                return false;
	        }
	    }
	    return true;
	}

};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int V, E;
		cin >> V >> E;
		vector<int>adj[V];
		for(int i = 0; i < E; i++){
			int u, v;
			cin >> u >> v;
			adj[u].push_back(v);
			adj[v].push_back(u);
		}
		Solution obj;
		bool ans = obj.isBipartite(V, adj);    
		if(ans)cout << "1\n";
		else cout << "0\n";  
	}
	return 0;
}  // } Driver Code Ends

Java Solution

// { Driver Code Starts
import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while(T-->0)
        {
            String[] S = br.readLine().trim().split(" ");
            int V = Integer.parseInt(S[0]);
            int E = Integer.parseInt(S[1]);
            ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
            for(int i = 0; i < V; i++){
                adj.add(new ArrayList<Integer>());
            }
            for(int i = 0; i < E; i++){
                String[] s = br.readLine().trim().split(" ");
                int u = Integer.parseInt(s[0]);
                int v = Integer.parseInt(s[1]);
                adj.get(u).add(v);
                adj.get(v).add(u);
            }
            Solution obj = new Solution();
            boolean ans = obj.isBipartite(V, adj);
            if(ans)
                System.out.println("1");
            else System.out.println("0");
       }
    }
}// } Driver Code Ends


class Solution
{
    
    public boolean bfs(int v, ArrayList<ArrayList<Integer>> adj, int color[]){
        Queue<Integer> q = new LinkedList<Integer>();
        
        color[v] = 1;
        q.offer(v);
        
        int u;
        while(!q.isEmpty()){
            u = q.poll();
            
            for(Integer neighbor : adj.get(u)){
                if(color[neighbor] == -1){
                    color[neighbor] = 1 - color[u];
                    q.offer(neighbor);
                }
                else{
                    if(color[neighbor] == color[u])
                        return false;
                }
            }
        }
        
        return true;
    }
    
    public boolean isBipartite(int V, ArrayList<ArrayList<Integer>>adj)
    {
        // Code here
        int color[] = new int[V];
        Arrays.fill(color, -1);
        
        for(int i = 0; i < V; i++){
            if(color[i] == -1 && !bfs(i, adj, color)){
                return false;
            }
        }
        return true;
    }
}