C++ Solution

/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    
    unordered_map<Node*, Node*> mp;
    
    void dfs(Node *node){
        Node *copy = new Node(node -> val);
        mp[node] = copy;
        for(auto ng : node -> neighbors){
            if(mp.find(ng) != mp.end()){
                copy -> neighbors.push_back(mp[ng]);
            }
            else{
                dfs(ng);
                copy -> neighbors.push_back(mp[ng]);
            }
        }
    }
    
    Node* cloneGraph(Node* node) {
       if(!node) return node;
       dfs(node);
       return mp[node];
    }
};

Java Solution

/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    
    HashMap<Node, Node> mp = new HashMap<Node, Node>();
    
    void dfs(Node node){
        Node copy = new Node(node.val);
        mp.put(node, copy);
        for(Node ng : node.neighbors){
            if(mp.containsKey(ng)){
                copy.neighbors.add(mp.get(ng));
            }
            else{
                dfs(ng);
                copy.neighbors.add(mp.get(ng));
            }
        }
    }
    
    public Node cloneGraph(Node node) {
        if(node == null) return null;
        dfs(node);
        return mp.get(node);
    }
}