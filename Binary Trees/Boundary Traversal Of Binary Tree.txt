C++ Solution

#include <bits/stdc++.h>
using namespace std;
#define MAX_HEIGHT 100000

// Tree Node
struct Node
{
    int data;
    Node* left;
    Node* right;
};

// Utility function to create a new Tree Node
Node* newNode(int val)
{
    Node* temp = new Node;
    temp->data = val;
    temp->left = NULL;
    temp->right = NULL;

    return temp;
}


// Function to Build Tree
Node* buildTree(string str)
{
    // Corner Case
    if(str.length() == 0 || str[0] == 'N')
        return NULL;

    // Creating vector of strings from input
    // string after spliting by space
    vector<string> ip;

    istringstream iss(str);
    for(string str; iss >> str; )
        ip.push_back(str);

    // Create the root of the tree
    Node* root = newNode(stoi(ip[0]));

    // Push the root to the queue
    queue<Node*> queue;
    queue.push(root);

    // Starting from the second element
    int i = 1;
    while(!queue.empty() && i < ip.size()) {

        // Get and remove the front of the queue
        Node* currNode = queue.front();
        queue.pop();

        // Get the current node's value from the string
        string currVal = ip[i];

        // If the left child is not null
        if(currVal != "N") {

            // Create the left child for the current node
            currNode->left = newNode(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->left);
        }

        // For the right child
        i++;
        if(i >= ip.size())
            break;
        currVal = ip[i];

        // If the right child is not null
        if(currVal != "N") {

            // Create the right child for the current node
            currNode->right = newNode(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }

    return root;
}









 // } Driver Code Ends
/* A binary tree Node
struct Node
{
    int data;
    Node* left, * right;
}; */

class Solution {
public:
    
    void boundaryLeft(Node *root, vector<int> &res){
        if(root){
            if(root -> left){
                res.push_back(root -> data);
                boundaryLeft(root -> left, res);
            }
            else{
                if(root -> right){
                    res.push_back(root -> data);
                    boundaryLeft(root -> right, res);
                }
            }
        }
    }
    
    void leaves(Node *root, vector<int> &res){
        if(root){
            if(!(root -> left) && !(root -> right)){
                res.push_back(root -> data);
            }
            if(root -> left)
                leaves(root -> left, res);
            if(root -> right)
                leaves(root -> right, res);
        }
    }
    
    void boundaryRight(Node *root, vector<int> &res){
        if(root){
            if(root -> right){
                boundaryRight(root -> right, res);
                res.push_back(root -> data);
            }
            else{
                if(root -> left){
                    boundaryRight(root -> left, res);
                    res.push_back(root -> data);
                }
            }
        }
    }

    vector <int> boundary(Node *root)
    {
        //Your code here
        vector<int> res;
        if(!root) return res;
        res.push_back(root -> data);
        boundaryLeft(root -> left, res);
        leaves(root -> left, res);
        leaves(root -> right, res);
        boundaryRight(root -> right, res);
        return res;
    }
};

// { Driver Code Starts.

/* Driver program to test size function*/

int main() {
    int t;
    string tc;
    getline(cin, tc);
    t=stoi(tc);
    while(t--)
    {
        string s ,ch;
        getline(cin, s);
        Node* root = buildTree(s);
        Solution ob;
        vector <int> res = ob.boundary(root);
        for (int i : res) cout << i << " ";
        cout << endl;
    }
    return 0;
}  // } Driver Code Ends

Java Solution

import java.io.*;
import java.util.*;

class Node  
{ 
    int data; 
    Node left, right; 
   
    public Node(int d)  
    { 
        data = d; 
        left = right = null; 
    } 
}

class GFG
{
    static Node buildTree(String str)
    {
        // Corner Case
        if(str.length() == 0 || str.equals('N'))
            return null;
        String[] s = str.split(" ");
        
        Node root = new Node(Integer.parseInt(s[0]));
        Queue <Node> q = new LinkedList<Node>();
        q.add(root);
        
        // Starting from the second element
        int i = 1;
        while(!q.isEmpty() && i < s.length)
        {
              // Get and remove the front of the queue
              Node currNode = q.remove();
        
              // Get the current node's value from the string
              String currVal = s[i];
        
              // If the left child is not null
              if(!currVal.equals("N")) 
              {
        
                  // Create the left child for the current node
                  currNode.left = new Node(Integer.parseInt(currVal));
        
                  // Push it to the queue
                  q.add(currNode.left);
              }
        
              // For the right child
              i++;
              if(i >= s.length)
                  break;
              currVal = s[i];
        
              // If the right child is not null
              if(!currVal.equals("N")) 
              {
        
                  // Create the right child for the current node
                  currNode.right = new Node(Integer.parseInt(currVal));
        
                  // Push it to the queue
                  q.add(currNode.right);
              }
              
              i++;
        }
    
        return root;
    }
    
    public static void main(String args[]) throws IOException {
    
       BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine().trim());
        while(t>0)
        {
            String s = br.readLine();
            Node root = buildTree(s);
            
            Solution T = new Solution();
            
            ArrayList <Integer> res = T.boundary(root);
            for (Integer num : res) System.out.print (num + " ");
            System.out.println();
            t--;
        }
    }
}
// } Driver Code Ends


//User function Template for Java

// class Node  
// { 
//     int data; 
//     Node left, right; 
   
//     public Node(int d)  
//     { 
//         data = d; 
//         left = right = null; 
//     } 
// }

class Solution
{
    
    void boundaryLeft(Node root, ArrayList<Integer> res){
        if(root != null){
            if(root.left != null){
                res.add(root.data);
                boundaryLeft(root.left, res);
            }
            else{
                if(root.right != null){
                    res.add(root.data);
                    boundaryLeft(root.right, res);
                }
            }
        }
    }
    
    void leaves(Node root, ArrayList<Integer> res){
        if(root != null){
            if(root.left == null && root.right == null){
                res.add(root.data);
            }
            if(root.left != null) leaves(root.left, res);
            if(root.right != null) leaves(root.right, res);
        }
    }
    
    void boundaryRight(Node root, ArrayList<Integer> res){
        if(root != null){
            if(root.right != null){
                boundaryRight(root.right, res);
                res.add(root.data);
            }
            else{
                if(root.left != null){
                    boundaryRight(root.left, res);
                    res.add(root.data);
                }
            }
        }
    }
    
	ArrayList <Integer> boundary(Node node)
	{
	    ArrayList<Integer> res = new ArrayList<Integer>();
	    if(node == null) return res;
	    res.add(node.data);
	    boundaryLeft(node.left, res);
	    leaves(node.left, res);
	    leaves(node.right, res);
	    boundaryRight(node.right, res);
	    return res;
	}
}
