C++ Solution

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    void getPathsFromRoot(TreeNode *root, int targetSum, int &paths){
        if(root){
            if(root -> val == targetSum){ paths++; }
            targetSum -= root -> val;
            getPathsFromRoot(root -> left, targetSum, paths);
            getPathsFromRoot(root -> right, targetSum, paths);
        }
    }
    
    int pathSum(TreeNode* root, int targetSum) {
        if(!root){ return 0; }
        int paths = 0;
        getPathsFromRoot(root, targetSum, paths);
        paths += pathSum(root -> left, targetSum);
        paths += pathSum(root -> right, targetSum);
        return paths;
    }
};

Java Solution

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Path{
    int p;
    Path(int _p){
        p = _p;
    }
}

class Solution {
    
    void getPathsFromRoot(TreeNode root, int targetSum, Path paths){
        if(root != null){
            if(root.val == targetSum) { paths.p++; }
            targetSum -= root.val;
            getPathsFromRoot(root.left, targetSum, paths);
            getPathsFromRoot(root.right, targetSum, paths);
        }
    }
    
    public int pathSum(TreeNode root, int targetSum) {
        if(root == null){ return 0; }
        Path paths = new Path(0);
        getPathsFromRoot(root, targetSum, paths);
        paths.p += pathSum(root.left, targetSum);
        paths.p += pathSum(root.right, targetSum);
        return paths.p;
    }
}