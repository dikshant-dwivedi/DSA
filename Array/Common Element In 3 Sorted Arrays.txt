C++ Solution

// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
class Solution
{
    public:
    
       bool binary_search(int arr[], int n, int key){
           int l = 0, h = n-1, m;
           while(l <= h){
               m = l + (h - l)/2;
               if(arr[m] == key){
                   return true;
               }
               else if(arr[m] < key){
                   l = m + 1;
               }
               else{
                   h = m - 1;
               }
           }
           return false;
       }
    
       vector <int> commonElements (int A[], int B[], int C[], int n1, int n2, int n3)
        {
            //code here.
            vector<int> res;
            for(int i = 0; i < n1; i++){
                if(A[i] == A[i-1]){
                    continue;
                }
                if(binary_search(B, n2, A[i]) && binary_search(C, n3, A[i])){
                    res.push_back(A[i]);
                }
            }
            return res;
        }

};

// { Driver Code Starts.

int main ()
{
    int t; cin >> t;
    while (t--)
    {
        int n1, n2, n3; 
        cin >> n1 >> n2 >> n3;
        int A[n1];
        int B[n2];
        int C[n3];
        
        for (int i = 0; i < n1; i++) cin >> A[i];
        for (int i = 0; i < n2; i++) cin >> B[i];
        for (int i = 0; i < n3; i++) cin >> C[i];
        
        Solution ob;
        
        vector <int> res = ob.commonElements (A, B, C, n1, n2, n3);
        if (res.size () == 0) 
            cout << -1;
        for (int i = 0; i < res.size (); i++) 
            cout << res[i] << " "; 
        cout << endl;
    }
}  // } Driver Code Ends

Java Solution

// { Driver Code Starts
//Initial Template for Java

import java.util.*;

public class GFG
{
    public static void main(String args[]) 
    {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- > 0) 
        {
            int n1 = sc.nextInt();
            int n2 = sc.nextInt();
            int n3 = sc.nextInt();
            
            int A[] = new int[n1];
            int B[] = new int[n2];
            int C[] = new int[n3];
            
            for (int i = 0;i < n1;i++)
            {
                A[i] = sc.nextInt();
            }
            for (int i = 0;i < n2;i++)
            {
                B[i] = sc.nextInt();
            }
            for (int i = 0;i < n3;i++)
            {
                C[i] = sc.nextInt();
            }
            
            Solution sol = new Solution();
            ArrayList<Integer> res = sol.commonElements(A, B, C, n1, n2, n3);
            if (res.size() == 0)
            {
                System.out.print(-1);
            }
            else 
            {
                for (int i = 0;i < res.size();i++)
                {
                    System.out.print(res.get(i) + " ");
                }    
            }
            System.out.println();
        }
    }
}

// } Driver Code Ends


//User function Template for Java

class Solution
{
    boolean binary_search(int arr[], int n, int key){
        int l = 0, h = n-1, m;
        while(l <= h){
            m = l + (h - l)/2;
            if(arr[m] == key){
                return true;
            }
            else if(arr[m] < key){
                l = m + 1;
            }
            else{
                h = m - 1;
            }
        }
        return false;
    }
    
    ArrayList<Integer> commonElements(int A[], int B[], int C[], int n1, int n2, int n3) 
    {
        // code here 
        ArrayList<Integer> res = new ArrayList<Integer>();
        for(int i = 0; i < n1; i++){
            if(i > 0 && A[i] == A[i-1]){
                continue;
            }
            if(binary_search(B, n2, A[i]) && binary_search(C, n3, A[i])){
                res.add(A[i]);
            }
        }
        return res;
    }
}