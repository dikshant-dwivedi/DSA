C++ Solution

// { Driver Code Starts
#include <bits/stdc++.h>

using namespace std;

 // } Driver Code Ends
//User function template for C++
class Solution{
public:

	// Function to find maximum product subarray
	long long maxProduct(vector<int> arr, int n) {
	    // code here
        long long prod = 1;
        long long res = INT_MIN;
        for(int i = 0; i < n; i++){
            prod *= arr[i];
            res = max(prod, res);
            if(prod == 0) prod = 1;
        }
        prod = 1;
        for(int i = n-1; i >= 0; i--){
            prod *= arr[i];
            res = max(prod, res);
            if(prod == 0) prod = 1;
        }
        return res;
	}
};

// { Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, i;
        cin >> n;
        vector<int> arr(n);
        for (i = 0; i < n; i++) {
            cin >> arr[i];
        }
        Solution ob;
        auto ans = ob.maxProduct(arr, n);
        cout << ans << "\n";
    }
    return 0;
}  // } Driver Code Ends

Java Solution

// { Driver Code Starts
import java.io.*;
import java.util.*;

  public class Main {

    public static void main(String[] args) throws Exception {
        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int tc = Integer.parseInt(br.readLine());
        while (tc-- > 0) {
            int n = Integer.parseInt(br.readLine());
            int[] arr = new int[n];
            String[] inputLine = br.readLine().split(" ");
            for (int i = 0; i < n; i++) {
                arr[i] = Integer.parseInt(inputLine[i]);
            }

            System.out.println(new Solution().maxProduct(arr, n));
        }
    }
}
// } Driver Code Ends


class Solution {
    // Function to find maximum product subarray
    long maxProduct(int[] arr, int n) {
        // code here
        long res = Integer.MIN_VALUE;
        long prod = 1;
        for(int i = 0; i < n; i++){
            prod *= arr[i];
            res = Math.max(res, prod);
            if(prod == 0)
                prod = 1;
        }
        prod = 1;
        for(int i = n-1; i >= 0; i--){
            prod *= arr[i];
            res = Math.max(res, prod);
            if(prod == 0)
                prod = 1;
        }
        return res;
    }
}