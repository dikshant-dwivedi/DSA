C++ Solution

// { Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
// User function Template for C++

class Solution{
public:

    int isSubsetSumPossible(int arr[], int n, int reqSum){
        if(reqSum == 0) return true;
        if(n == 0) return false;
        else if(arr[n-1] <= reqSum){
            return isSubsetSumPossible(arr, n-1, reqSum-arr[n-1]) || isSubsetSumPossible(arr, n-1, reqSum);
        }
        else{
            return isSubsetSumPossible(arr, n-1, reqSum);
        }
    }
    
    int equalPartition(int N, int arr[])
    {
        // code here
        int sum = 0;
        for(int i = 0; i < N; i++){
            sum += arr[i];
        }
        
        if(sum % 2 != 0) return false;
        return isSubsetSumPossible(arr, N, sum/2);
    }
};

// { Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        int N;
        cin>>N;
        int arr[N];
        for(int i = 0;i < N;i++)
            cin>>arr[i];
        
        Solution ob;
        if(ob.equalPartition(N, arr))
            cout<<"YES\n";
        else
            cout<<"NO\n";
    }
    return 0;
}  // } Driver Code Ends

Java Solution

// { Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.util.*;

class GFG{
    public static void main(String args[])throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(in.readLine());
        while(t-- > 0){
            int N = Integer.parseInt(in.readLine());
            String input_line[] = in.readLine().trim().split("\\s+");
            int arr[] = new int[N];
            for(int i = 0;i < N;i++)
                arr[i] = Integer.parseInt(input_line[i]);
            
            Solution ob = new Solution();
            int x = ob.equalPartition(N, arr);
            if(x == 1)
                System.out.println("YES");
            else
                System.out.println("NO");
        }
    }
}// } Driver Code Ends


// User function Template for Java

class Solution{
    

    
    static int isSubsetSumPossible(int arr[], int n, int reqSum, int dp[][]){
        if(reqSum == 0) return 1;
        if(n == 0) return 0;
        else if(dp[n][reqSum] != -1) return dp[n][reqSum];
        else if(arr[n-1] <= reqSum){
            return dp[n][reqSum] = Math.max(isSubsetSumPossible(arr, n-1, reqSum-arr[n-1], dp), isSubsetSumPossible(arr, n-1, reqSum, dp));
        }
        else{
            return dp[n][reqSum] = isSubsetSumPossible(arr, n-1, reqSum, dp);
        }
    }
    
    static int equalPartition(int N, int arr[])
    {
        // code here
        int sum = 0;
        for(int i : arr){
            sum += i;
        }
        if(sum % 2 == 1) return 0;
        int[][] dp = new int[N+1][sum/2 + 1];
        for(int i[] : dp){
            Arrays.fill(i, -1);
        }
        return isSubsetSumPossible(arr, N, sum/2, dp);
    }
}