C++ Solution

// { Driver Code Starts
//Initial template for C++

#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
//User function template for C++

class Solution {
  public:
  
    vector<vector<int>> res;
    
    void backtrack(int idx, vector<int> &A, int reqSum, vector<int> &currCombo){
        
        if(reqSum == 0){
            res.push_back(currCombo);
        }
        else{
            for(int i = idx; i < A.size(); i++){
                if(A[i] <= reqSum){
                    currCombo.push_back(A[i]);
                    backtrack(i, A, reqSum - A[i], currCombo);
                    currCombo.pop_back();    
                }
                else{
                    return;
                }
            }
        }
    }

    vector<int> removeDups(vector<int> &A){
        vector<int> B;
        for(int i = 0; i < A.size(); i++){
            if(A[i] != A[i-1]){
                B.push_back(A[i]);
            }
        }
        return B;
    }
    //Function to return a list of indexes denoting the required 
    //combinations whose sum is equal to given number.
    vector<vector<int> > combinationSum(vector<int> &A, int B) {
        // Your code here
        sort(A.begin(), A.end());
        A = removeDups(A);
        vector<int> currCombo;
        backtrack(0, A, B, currCombo);
        return res;
    }
};

// { Driver Code Starts.
int main(){
    int t;
    cin>>t;
    while(t--){
        int n;
        cin>>n;
        vector<int> A;
        for(int i=0;i<n;i++){
            int x;
            cin>>x;
            A.push_back(x);
        }   
        int sum;
        cin>>sum;
        Solution ob;
        vector<vector<int>> result = ob.combinationSum(A, sum);
   		if(result.size()==0){
   			cout<<"Empty";
   		}
        for(int i=0;i<result.size();i++){
            cout<<'(';
            for(int j=0;j<result[i].size();j++){
                cout<<result[i][j];
                if(j<result[i].size()-1)
                    cout<<" ";
            }
            cout<<")";
        }
        cout<<"\n";
    }
}	  // } Driver Code Ends

Java Solution

// { Driver Code Starts
//Initial template for JAVA

import java.util.*;
import java.io.*;
import java.lang.*;

class Driverclass
{
    static ArrayList<ArrayList<Integer>> res = new ArrayList<>();
    public static void main (String[] args)throws IOException {
        
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        PrintWriter out = new PrintWriter(System.out);
        int t = Integer.parseInt(br.readLine());
        
        while(t-- >0)
        {
            String str[] = br.readLine().trim().split(" ");
            int n = Integer.parseInt(str[0]);
            ArrayList<Integer> list = new ArrayList<>();
            str = br.readLine().trim().split(" ");
            for(int i = 0; i <n ;i++)
                list.add(Integer.parseInt(str[i]));
            str = br.readLine().trim().split(" ");    
            int sum = Integer.parseInt(str[0]);
            
            Solution ob = new Solution();
            
            res = ob.combinationSum(list, sum);
            if (res.size() == 0) {
    			out.print("Empty");
    		}
 
    		// Print all combinations stored in res.
    		for (int i = 0; i < res.size(); i++) {
    			if (res.size() > 0) {
    				out.print("(");
    				List<Integer> ij = res.get(i);
    				for (int j = 0; j < ij.size(); j++) {
    				    
    					out.print(ij.get(j));
    					if(j < ij.size()-1)
    					 out.print(" ");
    				}
    				out.print(")");
    			}
    		}
    		out.println();
    		res.clear();
	    }
	    out.flush();
    }
    
}// } Driver Code Ends


//User function template for JAVA

class Solution
{
    static ArrayList<ArrayList<Integer>> res;
    //Function to return a list of indexes denoting the required 
    //combinations whose sum is equal to given number.
    static void backtrack(int idx, ArrayList<Integer> A, ArrayList<Integer> currCombo, int reqSum){
        if(reqSum == 0){
            res.add(new ArrayList<Integer>(currCombo));
        }
        else{
            for(int i = idx; i < A.size(); i++){
                if(A.get(i) <= reqSum){
                    currCombo.add(A.get(i));
                    backtrack(i, A, currCombo, reqSum - A.get(i));
                    currCombo.remove(currCombo.size()-1);   
                }
                else{
                    return;
                }
            }
        }
    }
    
    static ArrayList<Integer> removeDups(ArrayList<Integer> A){
        ArrayList<Integer> B = new ArrayList<Integer>();
        B.add(A.get(0));
        for(int i = 1; i < A.size(); i++){
            if(A.get(i) != A.get(i-1)){
                B.add(A.get(i));
            }
        }
        return B;
    }
    
    static ArrayList<ArrayList<Integer>> combinationSum(ArrayList<Integer> A, int B)
    {
        // add your code here
        res = new ArrayList<ArrayList<Integer>>();
        Collections.sort(A);
        A = removeDups(A);
        ArrayList<Integer> currCombo = new ArrayList<Integer>();
        backtrack(0, A, currCombo, B);
        return res;
    }
}