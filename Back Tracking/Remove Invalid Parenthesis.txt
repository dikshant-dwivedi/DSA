C++ Solution

class Solution {
public:
    
    unordered_set<string> visited;
    
    void backtrack(string possAns, int minBracketToRemove, vector<string> &res){
        
        if(visited.find(possAns) != visited.end()) return;
        visited.insert(possAns);
        
        if(minBracketToRemove == 0 &&  
           getMinBracketToRemove(possAns) == 0){
                res.push_back(possAns);
            }
        else{
            string modStrWithoutBracket;
            for(int i = 0; i < possAns.length(); i++){
                modStrWithoutBracket = possAns.substr(0, i) + possAns.substr(i + 1);
                backtrack(modStrWithoutBracket, minBracketToRemove - 1, res);
            }
        }
        
    }
    
    ///pop only when we get a closing bracket and stack top has opening bracket
    //in all other cases push into the stack. for letters, continue
    int getMinBracketToRemove(string s){
        stack<char> st;
        for(char i: s){
            if(!st.empty() && st.top() == '(' && i == ')')
                st.pop();
            else if(i == ')' || i == '('){
                st.push(i);
            }
        }
        return st.size();
    }
    
    vector<string> removeInvalidParentheses(string s) {
        vector<string> res;
        backtrack(s, getMinBracketToRemove(s), res);
        return res;
    }
};

Java Solution

class Solution {
    
    public HashSet<String> set;
    
    public void backtrack(String s, int minBracketToRemove, List<String> res){
        if(set.contains(s)) return;
        set.add(s);
            
        if(minBracketToRemove == 0 && getMinBracketToRemove(s) == 0){
            res.add(s);
        }
        else{
            String modStrWithoutBracket;
            for(int i = 0; i < s.length(); i++){
                modStrWithoutBracket = s.substring(0, i) + s.substring(i+1);
                backtrack(modStrWithoutBracket, minBracketToRemove - 1, res);
            }
        }
    }
    
    public int getMinBracketToRemove(String s){
        Stack<Character> st = new Stack<Character>();
        char c;
        for(int i = 0; i < s.length(); i++){
            c = s.charAt(i);
            if(!st.isEmpty() && c == ')' && st.peek() == '('){
                st.pop();
            }
            else if(c == '(' || c == ')'){
                st.push(c);
            }
        }
        return st.size();
    }
    
    public List<String> removeInvalidParentheses(String s) {
        set = new HashSet<String>();
        List<String> res = new ArrayList<String>();
        backtrack(s, getMinBracketToRemove(s), res);
        return res;
    }
}
