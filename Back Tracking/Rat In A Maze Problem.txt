C++ Solution

// { Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
// User function template for C++

class Solution{
    public:
    
    int dr[4] = {1, 0, 0, -1};
    int dc[4] = {0, -1, 1, 0};
    //directions - D L R U
    // D - go down one row; L - go left one column; R - go right one column; U - go up one column

    int isSafe(int r, int c, int n){
        if(r >= 0 && c >= 0 && r < n && c < n){
            return true;
        }
        return false;
    }
    
    void getAllPaths(int r, int c,
        vector<vector<int>> &maze, int n,
        vector<string> &res, string currPath,
        vector<vector<int>> &vis){
        
        if(r == n-1 && c == n-1){
            res.push_back(currPath);
            return;
        }
        
        string dir = "DLRU";
        for(int currDir = 0; currDir < 4; currDir++){
            int newR = r + dr[currDir], newC = c + dc[currDir];
            if(isSafe(newR, newC, n) && !vis[newR][newC] && maze[newR][newC]){
                vis[r][c] = 1;
                getAllPaths(newR, newC, maze, n, res, currPath + dir[currDir], vis);
                vis[r][c] = 0;
            }
        }
    }    
    
    vector<string> findPath(vector<vector<int>> &maze, int n) {
        // Your code goes here
        vector<string> res;
        vector<vector<int>> vis(n, vector<int>(n, 0));
        if(maze[0][0] == 1) getAllPaths(0, 0, maze, n, res, "", vis);
        return res;
    }
};

    


// { Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<vector<int>> m(n, vector<int> (n,0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> m[i][j];
            }
        }
        Solution obj;
        vector<string> result = obj.findPath(m, n);
        sort(result.begin(), result.end());
        if (result.size() == 0)
            cout << -1;
        else
            for (int i = 0; i < result.size(); i++) cout << result[i] << " ";
        cout << endl;
    }
    return 0;
}  // } Driver Code Ends

Java Solution

// { Driver Code Starts
// Initial Template for Java

import java.util.*;
class Rat {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- > 0) {
            int n = sc.nextInt();
            int[][] a = new int[n][n];
            for (int i = 0; i < n; i++)
                for (int j = 0; j < n; j++) a[i][j] = sc.nextInt();

            Solution obj = new Solution();
            ArrayList<String> res = obj.findPath(a, n);
            Collections.sort(res);
            if (res.size() > 0) {
                for (int i = 0; i < res.size(); i++)
                    System.out.print(res.get(i) + " ");
                System.out.println();
            } else {
                System.out.println(-1);
            }
        }
    }
}
// } Driver Code Ends


// User function Template for Java

// m is the given matrix and n is the order of matrix
class Solution {
    
    static int dr[] = {1, 0, 0, -1};
    static int dc[] = {0, -1, 1, 0};
    
    public static boolean isSafe(int r, int c, int n){
        if(r >= 0 && c >= 0 && r < n && c < n){
            return true;
        }
        return false;
    }
    
    public static void getAllPaths(int r, int c, int [][] maze, int n, ArrayList<String> res, String currPath, int vis[][]){
        if(r == n-1 && c == n-1){
            res.add(currPath);
            return;
        }
        String dir = "DLRU";
        for(int currDir = 0; currDir < 4; currDir++){
            int newR = r + dr[currDir], newC = c + dc[currDir];
            if(isSafe(newR, newC, n) && vis[newR][newC] == 0 && maze[newR][newC] == 1){
                vis[r][c] = 1;
                getAllPaths(newR, newC, maze, n, res, currPath + dir.charAt(currDir), vis);
                vis[r][c] = 0;
            }
        }
    }
    
    public static ArrayList<String> findPath(int[][] maze, int n) {
        // Your code here
        int vis[][] = new int[n][n];
        for(int[] i : vis){
            Arrays.fill(i, 0);
        }
        
        ArrayList<String> res = new ArrayList<String>();
        if(maze[0][0] == 1) getAllPaths(0, 0, maze, n, res, "", vis);
        return res;
    }
}