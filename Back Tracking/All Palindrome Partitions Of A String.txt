C++ Solution

// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
//User function Template for C++

class Solution {
  public:
    
    int isPalindrome(string s, int end){
        int i = 0, j = end;
        while(i <= j){
            if(s[i++] != s[j--]) return false;
        }
        return true;
    }
    
    void backtrack(string s, vector<string> &partition, vector<vector<string>> &res){
        if(s == ""){
            res.push_back(partition);
        }
        else{
            for(int j = 0; j < s.length(); j++){
                if(isPalindrome(s, j)){
                    partition.push_back(s.substr(0, j + 1));
                    backtrack(s.substr(j+1), partition, res);
                    partition.pop_back();
                }
            }
        }
    }
  
    vector<vector<string>> allPalindromicPerms(string s) {
        // code here
        vector<vector<string>> res;
        vector<string> partition;
        backtrack(s, partition, res);
        return res;
    }
};

// { Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        string S;
        
        cin>>S;

        Solution ob;
        vector<vector<string>> ptr = ob.allPalindromicPerms(S);
        
        for(int i=0; i<ptr.size(); i++)
        {
            for(int j=0; j<ptr[i].size(); j++)
            {
                cout<<ptr[i][j]<<" ";
            }
            cout<<endl;
        }
    }
    return 0;
}  // } Driver Code Ends

Java Solution

// { Driver Code Starts
import java.io.*;
import java.util.*;

class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader read =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while (t-- > 0) {
            String S = read.readLine();

            Solution ob = new Solution();
            ArrayList<ArrayList<String>> allPart = ob.allPalindromicPerms(S);
            
            for (int i=0; i<allPart.size(); i++)  
            { 
                for (int j=0; j<allPart.get(i).size(); j++) 
                { 
                    System.out.print(allPart.get(i).get(j) + " "); 
                } 
                System.out.println(); 
            } 
        }
    }
}// } Driver Code Ends


//User function Template for Java

class Solution {
    
    static boolean isPalindrome(String s, int end){
        int i = 0, j = end;
        while(i <= j){
            if(s.charAt(i++) != s.charAt(j--)) return false;
        }
        return true;
    }
    
    static void backtrack(String s, ArrayList<String> partition, ArrayList<ArrayList<String>> res){
        if(s.isEmpty()){
            res.add(new ArrayList(partition));
        }
        else{
            for(int j = 0; j < s.length(); j++){
                if(isPalindrome(s, j)){
                    partition.add(s.substring(0, j+1));
                    backtrack(s.substring(j+1), partition, res);
                    partition.remove(partition.size()-1);
                }
            }
        }
    }
    
    static ArrayList<ArrayList<String>> allPalindromicPerms(String s) {
        // code here
        ArrayList<ArrayList<String>> res = new ArrayList<ArrayList<String>>();
        ArrayList<String> partition = new ArrayList<String>();
        backtrack(s, partition, res);
        return res;
    }
};