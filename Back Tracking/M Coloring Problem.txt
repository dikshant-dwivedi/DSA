C++ Solution

// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
//Function to determine if graph can be coloured with at most M colours such
//that no two adjacent vertices of graph are coloured with same colour.
int isPossible(bool graph[101][101], int node, int color[], int i){
    for(int neighbour = 0; neighbour < 101; neighbour++){
        if(graph[node][neighbour] && color[neighbour] == i) return false;
    }
    return true;
}

bool solve(int node, bool graph[101][101], int color[], int m, int V){
    if(node == V) return true;
    for(int i = 1; i <= m; i++){
        if(isPossible(graph, node, color, i)){
            color[node] = i;
            if(solve(node + 1, graph, color, m, V)) return true;
            color[node] = 0;
        }
    }
    return false;
}

bool graphColoring(bool graph[101][101], int m, int V)
{
    // your code here
    int color[V] = {0};
    if(solve(0, graph, color, m, V)) return true;
    return false;
}

// { Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, m, e;
        cin >> n >> m >> e;
        int i;
        bool graph[101][101];
        for (i = 0; i < n; i++) {
            memset(graph[i], 0, sizeof(graph[i]));
        }
        for (i = 0; i < e; i++) {
            int a, b;
            cin >> a >> b;
            graph[a - 1][b - 1] = 1;
            graph[b - 1][a - 1] = 1;
        }
        cout << graphColoring(graph, m, n) << endl;
    }
    return 0;
}
  // } Driver Code Ends

Java Solution

// { Driver Code Starts
import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int tc = scan.nextInt();

        while (tc-- > 0) {
            int V = scan.nextInt();
            int C = scan.nextInt();
            int E = scan.nextInt();

            List<Integer>[] G = new ArrayList[V];
            for (int i = 0; i < V; i++) {
                G[i] = new ArrayList<>();
            }

            for (int i = 0; i < E; i++) {
                int u = scan.nextInt() - 1;
                int v = scan.nextInt() - 1;
                G[u].add(v);
                G[v].add(u);
            }
            int[] color = new int[V];

            System.out.println(new solve().graphColoring(G, color, 0, C) ? 1 : 0);
        }
    }
}
// } Driver Code Ends


class solve 
{
    
    public static boolean isPossible(List<Integer>[] G, int node, int[] color, int i){
        for(int neighbour: G[node]){
            if(color[neighbour] == i){
                return false;
            }
        }
        return true;
    }
    
    public static boolean solve(int node, List<Integer>[] G, int [] color, int V, int m){
        if(node == V) return true;
        for(int i = 1; i <= m; i++){
            if(isPossible(G, node, color, i)){
                color[node] = i;
                if(solve(node + 1, G, color, V, m)) return true;
                color[node] = 0;
            }
        }
        return false;
    }
    //Function to determine if graph can be coloured with at most M colours such
    //that no two adjacent vertices of graph are coloured with same colour.
    public static boolean graphColoring(List<Integer>[] G, int[] color, int i, int m) 
    {
        // Your code here
        int n = G.length;
        if(solve(0, G, color, n, m)) return true;
        return false;
    }
}