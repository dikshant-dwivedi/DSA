C++ Solution

// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends

class Solution
{
    public:
    
    string res;
    
    string swap(string s, int i, int j){
        char temp = s[i];
        s[i] = s[j];
        s[j] = temp;
        return s;
    }
    
    void backtrack(string s, int k, int idx){
        if(k == 0 || idx == s.length()) return;
        
        char maxc = s[idx];
        for(int i = idx; i < s.length(); i++){
            maxc = max(maxc, s[i]);
        }
        
        if(maxc != s[idx]) k -= 1;
        
        string swapped;
        for(int i = idx; i < s.length(); i++){
            if(s[i] == maxc){
                swapped = swap(s, i, idx);
                if(swapped.compare(res) > 0)
                    res = swapped;
                backtrack(swapped, k, idx + 1);
            }
        }
    }
    
    //Function to find the largest number after k swaps.
    string findMaximumNum(string str, int k)
    {
       res = str;
       backtrack(str, k, 0);
       return res;
    }
};

// { Driver Code Starts.

int main()
{
    int t, k;
    string str;

    cin >> t;
    while (t--)
    {
        cin >> k >> str;
        Solution ob;
        cout<< ob.findMaximumNum(str, k) << endl;
    }
    return 0;
}
  // } Driver Code Ends

Java Solution

// { Driver Code Starts
import java.io.*;
import java.util.*;
class GfG
{
    public static void main(String args[])throws IOException
        {
            Scanner sc = new Scanner(System.in);
            int t = sc.nextInt();
            while(t-->0)
                {
                    int k = sc.nextInt();
                    String str = sc.next();
                    Solution obj = new Solution();
                    System.out.println(obj.findMaximumNum(str, k));
                }
        }
}// } Driver Code Ends




class Solution
{
    public static String res;
    
    public static String swap(String s, int i, int j){
        char[] s_array = s.toCharArray();
        char temp = s_array[i];
        s_array[i] = s_array[j];
        s_array[j] = temp;
        return new String(s_array);
    }
    
    public static void backtrack(String s, int k, int idx){
        
        if(k == 0 || idx == s.length()) return;
        
        char maxc = s.charAt(idx);
        for(int i = idx; i < s.length(); i++){
            if(maxc < s.charAt(i)) maxc = s.charAt(i);
        }
        
        if(maxc != s.charAt(idx)) k -= 1;
        
        String swapped;
        for(int i = idx; i < s.length(); i++){
            if(maxc == s.charAt(i)){
                swapped = swap(s, i, idx);
                if(swapped.compareTo(res) > 0){
                    res = swapped;
                }
                backtrack(swapped, k, idx + 1);
            }
        }
    }
    //Function to find the largest number after k swaps.
    public static String findMaximumNum(String str, int k)
        {
            //code here.
            res = str;
            backtrack(str, k, 0);
            return res;
        }
}