C++ Solution

// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;
// UNASSIGNED is used for empty cells in sudoku grid 
#define UNASSIGNED 0  

// N is used for the size of Sudoku grid.  
// Size will be NxN  
#define N 9  


 // } Driver Code Ends

class Solution 
{
    public:
    
    int isPossible(int grid[N][N], int row, int col, int num){
        for(int j = 0; j < N; j++){
            if(grid[row][j] == num) return 0;
        }
        for(int i = 0; i < N; i++){
            if(grid[i][col] == num) return 0;
        }
        int sub_mat_row = 3*(row/3), sub_mat_col = 3*(col/3);
        for(int i = 0; i < 3; i++){
            for(int j = 0; j < 3; j++){
                if(grid[sub_mat_row + i][sub_mat_col + j] == num) return 0;
            }
        }
        return 1;
    }
    
    //Function to find a solved Sudoku. 
    bool SolveSudoku(int grid[N][N])  
    { 
        // Your code here
        /*solve(grid, 0, 0);
        return true;*/
        for(int i = 0; i < N; i++){
            for(int j = 0; j < N; j++){
                if(grid[i][j] == 0){
                    for(int k = 1; k <= 9; k++){
                        if(isPossible(grid, i, j, k)){
                            grid[i][j] = k;
                            if(SolveSudoku(grid)) return true;
                            grid[i][j] = 0;
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }
    
    //Function to print grids of the Sudoku.
    void printGrid (int grid[N][N]) 
    {
        // Your code here 
        for(int i = 0; i < N; i++){
            for(int j = 0; j < N; j++){
                cout << grid[i][j] << " ";
            }
        }
    }
};

// { Driver Code Starts.

int main() {
	int t;
	cin>>t;
	while(t--)
	{
		int grid[N][N];
		
		for(int i=0;i<9;i++)
		    for(int j=0;j<9;j++)
		        cin>>grid[i][j];
		        
		Solution ob;
		
		if (ob.SolveSudoku(grid) == true)  
            ob.printGrid(grid);  
        else
            cout << "No solution exists";  
        
        cout<<endl;
	}
	
	return 0;
}  // } Driver Code Ends

Java Solution

// { Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.io.*;
import java.lang.*;

class Driver_class
{
    public static void main(String args[])
    {
        
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        
        while(t-- > 0)
        {
            int grid[][] = new int[9][9];
            for(int i = 0; i < 9; i++)
            {
                for(int j = 0; j < 9; j++)
                grid[i][j] = sc.nextInt();
            }
            
            Solution ob = new Solution();
            
            if(ob.SolveSudoku(grid) == true)
                ob.printGrid(grid);
            else
                System.out.print("NO solution exists");
            System.out.println();
            
        }
    }
}



// } Driver Code Ends


//User function Template for Java

class Solution
{
    static boolean isPossible(int grid[][], int row, int col, int num){
        int N = grid.length;
        for(int j = 0; j < N; j++){
            if(grid[row][j] == num) return false;
        }
        for(int i = 0; i < N; i++){
            if(grid[i][col] == num) return false;
        }
        int sub_mat_row = 3*(row/3), sub_mat_col = 3*(col/3);
        for(int i = 0; i < 3; i++){
            for(int j = 0; j < 3; j++){
                if(grid[sub_mat_row + i][sub_mat_col + j] == num) return false;
            }
        }
        return true;
    }
    
    //Function to find a solved Sudoku. 
    static boolean SolveSudoku(int grid[][])
    {
        // add your code here
        int N = grid.length;
        for(int i = 0; i < N; i++){
            for(int j = 0; j < N; j++){
                if(grid[i][j] == 0){
                    for(int k = 1; k <= 9; k++){
                        if(isPossible(grid, i, j, k)){
                            grid[i][j] = k;
                            if(SolveSudoku(grid)) return true;
                            grid[i][j] = 0;
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }
    
    //Function to print grids of the Sudoku.
    static void printGrid (int grid[][])
    {
        // add your code here
        int N = grid.length;
        for(int i = 0; i < N; i++){
            for(int j = 0; j < N; j++){
                System.out.print(grid[i][j] + " ");
            }
        }
    }
}