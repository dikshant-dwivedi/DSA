C++ Solution

// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;



 // } Driver Code Ends
class Solution {
public:

    vector<int> visited;

    bool pathMoreThanKUtil(int u, int k, vector<vector<pair<int, int>>> &graph){
        if(k <= 0) return true;
        
        int v, w;
        for(auto neighbour: graph[u]){
            v = neighbour.first;
            w = neighbour.second;
            
            if(visited[v])
                continue;
                
            visited[v] = 1;
            
            if(k < w)
                return true;
            
            if(pathMoreThanKUtil(v, k - w, graph))
                return true;
                
            visited[v] = 0;
        }
        
        return false;
    }

    bool pathMoreThanK(int V, int E, int k, int *a) 
    { 
        
       vector<vector<pair<int, int>>> graph(V);
       int i = 0, u, v, w;
       while(i < E*3){
           graph[a[i]].push_back({a[i+1], a[i+2]});
           graph[a[i+1]].push_back({a[i], a[i+2]});
           i = i+3;
       }
       
       visited.resize(V, 0);
       visited[0] = 1;
       return pathMoreThanKUtil(0, k, graph);
       
    } 
};




// { Driver Code Starts.


int main() {
	//code
    int t;cin >> t;
    while(t--)
    {
        int V, E, K;
        cin >> V >> E >> K;
        int a[3*E + 1];
        for(int  i=0;i<3*E;i++){
            cin >> a[i];
        }
        
        Solution obj;
        if(obj.pathMoreThanK(V, E, K, a)){
            cout << 1 << endl;
        }
        else{
            cout << 0 << endl;
        }
        
    }
	return 0;
}  // } Driver Code Ends

Java Solution

// { Driver Code Starts
//Initial Template for Java


//Initial Template for Java

import java.io.*;
import java.util.*;

class GFG
{
    public static void main(String args[])throws IOException
    {
        
        BufferedReader read = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while(t-- > 0)
        {
            String input_line[] = read.readLine().trim().split("\\s+");
            int  V = Integer.parseInt(input_line[0]);
            int  E = Integer.parseInt(input_line[1]);
            int  K = Integer.parseInt(input_line[2]);
            int A[] = new int[3*E + 1];
            String input_line1[] = read.readLine().trim().split("\\s+");
            for(int i=0;i<3*E;i++){
                A[i] = Integer.parseInt(input_line1[i]);
            }
        
            Solution ob = new Solution();
            if(ob.pathMoreThanK(V, E, K, A)){
                System.out.println(1);
            } else{
                System.out.println(0);   
            }
        }
    }
}

// } Driver Code Ends


//User function Template for Java

class Neighbour{
    int v, w;
    Neighbour(int _v, int _w){
        v = _v;
        w = _w;
    }
}

class Solution{
    
    ArrayList<Integer> visited;
    
    boolean pathMoreThanKUtil(int u, int k, ArrayList<ArrayList<Neighbour>> graph){
        if(k <= 0) return true;
        
        int v, w;
        for(Neighbour n : graph.get(u)){
            v = n.v;
            w = n.w;
            
            if(visited.get(v) == 1)
                continue;
            
            visited.set(v, 1);
            
            if(w == k)
                return true;
                
            if(pathMoreThanKUtil(v, k-w, graph))
                return true;
                
            visited.set(v, 0);
        }
        
        return false;
    }
    
    boolean pathMoreThanK(int V , int E , int K , int [] A){

        ArrayList<ArrayList<Neighbour>> graph = new ArrayList<ArrayList<Neighbour>>();
        visited = new ArrayList<Integer>();
        
        while(graph.size() < V) {
            graph.add(new ArrayList<Neighbour>());
            visited.add(0);
        }
        
        int i = 0;
        while(i < 3*E){
            graph.get(A[i]).add(new Neighbour(A[i+1], A[i+2]));
            graph.get(A[i+1]).add(new Neighbour(A[i], A[i+2]));
            i+=3;
        }
        
        visited.set(0, 1);
        return pathMoreThanKUtil(0, K, graph);
        
    }
    
}