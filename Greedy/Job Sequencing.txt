C++ Solution

//{ Driver Code Starts
// Program to find the maximum profit job sequence from a given array 
// of jobs with deadlines and profits 
#include<bits/stdc++.h>
using namespace std; 

// A structure to represent a job 
struct Job 
{ 
    int id;	 // Job Id 
    int dead; // Deadline of job 
    int profit; // Profit if job is over before or on deadline 
}; 


// } Driver Code Ends
/*
struct Job 
{ 
    int id;	 // Job Id 
    int dead; // Deadline of job 
    int profit; // Profit if job is over before or on deadline 
};
*/

class Solution 
{
    public:
    
    //https://youtu.be/zPtI8q9gvX8
    
    static bool compareProfit(Job a, Job b){
        return a.profit > b.profit;
    }
    
    //Function to find the maximum profit and the number of jobs done.
    vector<int> JobScheduling(Job arr[], int n) 
    { 
        //sort in decreasing order of profits
        sort(arr, arr + n, compareProfit);
        
        //get maximum deadline to finish the jobs
        int maxDeadline = INT_MIN;
        for(int i = 0; i < n; i++){
            maxDeadline = max(maxDeadline, arr[i].dead);
        }
        
        vector<int> slotsAvailable(maxDeadline + 1, -1);
        
        //for each job check if there is a slot available
        //if a slot is available, fill the job in last slot
        int maxProfit = 0, numberOfJobs = 0;
        for(int i = 0; i < n; i++){
            for(int j = arr[i].dead; j >= 1; j--){
                if(slotsAvailable[j] == -1){
                    slotsAvailable[j] = arr[i].id;
                    numberOfJobs++;
                    maxProfit += arr[i].profit;
                    break;
                }
            }
        }
        
        return {numberOfJobs, maxProfit};
    } 
};

//{ Driver Code Starts.
// Driver program to test methods 
int main() 
{ 
    int t;
    //testcases
    cin >> t;
    
    while(t--){
        int n;
        
        //size of array
        cin >> n;
        Job arr[n];
        
        //adding id, deadline, profit
        for(int i = 0;i<n;i++){
                int x, y, z;
                cin >> x >> y >> z;
                arr[i].id = x;
                arr[i].dead = y;
                arr[i].profit = z;
        }
        Solution ob;
        //function call
        vector<int> ans = ob.JobScheduling(arr, n);
        cout<<ans[0]<<" "<<ans[1]<<endl;
    }
	return 0; 
}



// } Driver Code Ends

Java Solution

//{ Driver Code Starts
import java.io.*;
import java.lang.*;
import java.util.*;

class Job {
    int id, profit, deadline;
    Job(int x, int y, int z){
        this.id = x;
        this.deadline = y;
        this.profit = z; 
    }
}

class GfG {
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        //testcases
		int t = Integer.parseInt(br.readLine().trim());
		while(t-->0){
            String inputLine[] = br.readLine().trim().split(" ");
            
            //size of array
            int n = Integer.parseInt(inputLine[0]);
            Job[] arr = new Job[n];
            inputLine = br.readLine().trim().split(" ");
            
            //adding id, deadline, profit
            for(int i=0, k=0; i<n; i++){
                arr[i] = new Job(Integer.parseInt(inputLine[k++]), Integer.parseInt(inputLine[k++]), Integer.parseInt(inputLine[k++]));
            }
            
            Solution ob = new Solution();
            
            //function call
            int[] res = ob.JobScheduling(arr, n);
            System.out.println (res[0] + " " + res[1]);
        }
    }
}
// } Driver Code Ends


class JobComparator implements Comparator<Job> {
    public int compare(Job a, Job b){
        return b.profit - a.profit;
    }
}

class Solution
{
    //Function to find the maximum profit and the number of jobs done.
    int[] JobScheduling(Job arr[], int n)
    {
        // Your code here
        Arrays.sort(arr, new JobComparator());
        
        int maxDeadline = Integer.MIN_VALUE;
        for(int i = 0; i < n; i++){
            maxDeadline = Math.max(maxDeadline, arr[i].deadline);
        }
        
        int slotsAvailable[] = new int[maxDeadline + 1];
        Arrays.fill(slotsAvailable, -1);
        
        int res[] = new int[2];
        for(int i = 0; i < n; i++){
            for(int j = arr[i].deadline; j >= 1; j--){
                if(slotsAvailable[j] == -1){
                    res[0]++;
                    res[1] += arr[i].profit;
                    slotsAvailable[j] = arr[i].id;
                    break;
                }
            }
        }
        
        return res;
    }
}

/*
class Job {
    int id, profit, deadline;
    Job(int x, int y, int z){
        this.id = x;
        this.deadline = y;
        this.profit = z; 
    }
}
*/