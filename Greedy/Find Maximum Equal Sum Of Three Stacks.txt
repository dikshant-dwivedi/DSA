C++ Solution

//{ Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
//User function Template for C++

class Solution{
public:
    int maxEqualSum(int N1,int N2,int N3,vector<int> &S1,vector<int> &S2,vector<int> &S3){
        
        int sum1 = 0, sum2 = 0, sum3 = 0;
        for(auto i : S1){
            sum1 += i;
        }
        for(auto i : S2){
            sum2 += i;
        }
        for(auto i: S3){
            sum3 += i;
        }
        
        int i = 0, j = 0, k = 0;
        while(i < N1 && j < N2 && k < N3){
            if(sum1 == sum2 && sum2 == sum3){
                return sum1;
            }
            else if(sum1 >= sum2 && sum1 >= sum3){
                sum1 -= S1[i++];
            }
            else if(sum2 >= sum1 && sum2 >= sum3){
                sum2 -= S2[j++];
            }
            else{
                sum3 -= S3[k++];
            }
        }
        
        return 0;
    }
};

//{ Driver Code Starts.

int main(){
    
    int t;
    cin>>t;
    while(t--){
        int n1,n2,n3;
        cin>>n1>>n2>>n3;
        vector<int> s1(n1),s2(n2),s3(n3);
        for(int i=0;i<n1;i++){
            cin>>s1[i];
        }
        for(int i=0;i<n2;i++){
            cin>>s2[i];
        }
        for(int i=0;i<n3;i++){
            cin>>s3[i];
        }
        Solution ob;
        int ans=ob.maxEqualSum(n1,n2,n3,s1,s2,s3);
        cout<<ans<<endl;
    }
    
    return 0;
}
// } Driver Code Ends

Java Solution

//{ Driver Code Starts
import java.io.*;
import java.util.*;


class IntArray
{
    public static int[] input(BufferedReader br, int n) throws IOException
    {
        String[] s = br.readLine().trim().split(" ");
        int[] a = new int[n];
        for(int i = 0; i < n; i++)
            a[i] = Integer.parseInt(s[i]);
        
        return a;
    }
    
    public static void print(int[] a)
    {
        for(int e : a)
            System.out.print(e + " ");
        System.out.println();
    }
    
    public static void print(ArrayList<Integer> a)
    {
        for(int e : a)
            System.out.print(e + " ");
        System.out.println();
    }
}

class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t;
        t = Integer.parseInt(br.readLine());
        while(t-- > 0){
            
            int[] a = IntArray.input(br, 3);
            
            
            int[] S1 = IntArray.input(br, a[0]);
            
            
            int[] S2 = IntArray.input(br, a[1]);
            
            
            int[] S3 = IntArray.input(br, a[2]);
            
            Solution obj = new Solution();
            int res = obj.maxEqualSum(a[0],a[1],a[2], S1, S2, S3);
            
            System.out.println(res);
            
        }
    }
}

// } Driver Code Ends


class Solution {
    public static int maxEqualSum(int N1,int N2,int N3, int[] S1, int[] S2, int[] S3) {
        // code here
        int sum1 = 0, sum2 = 0, sum3 = 0;
        for(int i = 0; i < N1; i++){
            sum1 += S1[i];
        }
        for(int i = 0; i < N2; i++){
            sum2 += S2[i];
        }
        for(int i = 0; i < N3; i++){
            sum3 += S3[i];
        }
        
        int i = 0, j = 0, k = 0;
        while(i < N1 && j < N2 && k < N3){
            if(sum1 == sum2 && sum2 == sum3){
                return sum1;
            }
            else if(sum1 >= sum2 && sum1 >= sum3){
                sum1 -= S1[i++];
            }
            else if(sum2 >= sum1 && sum2 >= sum3){
                sum2 -= S2[j++];
            }
            else{
                sum3 -= S3[k++];
            }
        }
        
        return 0;
    }
}
        
