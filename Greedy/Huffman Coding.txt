C++ Solution

//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends

class HuffmanNode{
    public: 
        char label;
        int weight;
        HuffmanNode *left, *right;
        
        HuffmanNode(char _l, int _w){
            label = _l;
            weight = _w;
            left = right = NULL;
        }
};

class CompareHuffmanNode{
    public:
    bool operator()(HuffmanNode* const &p1, HuffmanNode* const &p2){
        return p1 -> weight > p2 -> weight;
    }
};

class Solution
{
	public:
	
	    //https://youtu.be/co4_ahEDCho
	
	    void fetchAllEncodes(HuffmanNode *root, string &path, vector<string> &resultCollection){
	        if(!(root -> left) && !(root -> right)){
	            resultCollection.push_back(path);
	        }
	        else{
	            path += '0';
	            fetchAllEncodes(root -> left, path, resultCollection);
	            path.pop_back();
	            path += '1';
	            fetchAllEncodes(root -> right, path, resultCollection);
	            path.pop_back();
	        }
	    }
	
		vector<string> huffmanCodes(string s,vector<int> f,int n)
		{
		    if(n == 0) return {};
		    if(n == 1) return {"0"};
		    
		    priority_queue<HuffmanNode*, vector<HuffmanNode*>, CompareHuffmanNode> q;
		    
		    for(int i = 0; i < n; i++){
		        q.push(new HuffmanNode(s[i], f[i]));
		    }
		    
		    while(q.size() != 1){
		        HuffmanNode *node1 = q.top();
		        q.pop();
		        HuffmanNode *node2 = q.top();
		        q.pop();
		        
		        HuffmanNode *combinedNode = new HuffmanNode('$', node1 -> weight + node2 -> weight);
		        combinedNode -> left = node1;
		        combinedNode -> right = node2;
		        
		        q.push(combinedNode);
		    }
		    
		    HuffmanNode *root = q.top();
		    q.pop();
		    
		    vector<string> resultCollection;
		    string path = "";
		    
		    fetchAllEncodes(root, path, resultCollection);
		    
		    return resultCollection;
		}
};


//{ Driver Code Starts.
int main(){
    int T;
    cin >> T;
    while(T--)
    {
	    string S;
	    cin >> S;
	    int N = S.length();
	    vector<int> f(N);
	    for(int i=0;i<N;i++){
	        cin>>f[i];
	    }
	    Solution ob;
	    vector<string> ans = ob.huffmanCodes(S,f,N);
	    for(auto i: ans)
	    	cout << i << " ";
	    cout << "\n";
    }
	return 0;
}
// } Driver Code Ends

Java Solution

//{ Driver Code Starts
//Initial Template for Java


import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
	public static void main(String[] args) throws IOException
	{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine().trim());
        while(t-->0)
        {
            String S = br.readLine().trim();
            int N = S.length();
            Solution ob = new Solution();
            String[] element = br.readLine().trim().split("\\s+");
		    int[] f = new int[N];
		    for(int i = 0; i < N; i++){
		        f[i] = Integer.parseInt(element[i]);
		    }
            ArrayList<String> res  = ob.huffmanCodes(S,f,N);
            for(int i = 0; i < res.size(); i++)
            {
                System.out.print(res.get(i)+" ");
            }
            System.out.println();
        }
	}
}
// } Driver Code Ends

//User function Template for Java
class HuffmanNode{
    char label;
    int weight;
    HuffmanNode left, right;
    HuffmanNode(char _l, int _w){
        label = _l;
        weight = _w;
        left = null;
        right = null;
    }
}

class NodeComparator implements Comparator<HuffmanNode> {
    public int compare(HuffmanNode n1, HuffmanNode n2){
        if(n1.weight == n2.weight) return 1;
        return n1.weight - n2.weight;
    }
}

class Solution {
    
    void fetchAllEncodes(HuffmanNode root, String path, ArrayList<String> resultCollection){
        if(root.left == null && root.right == null){
            resultCollection.add(new String(path));
        }
        else{
            fetchAllEncodes(root.left, path + "0", resultCollection);
            fetchAllEncodes(root.right, path + "1", resultCollection);
        }
    }
    
    public ArrayList<String> huffmanCodes(String s, int f[], int n)
    {
        // Code here
        PriorityQueue<HuffmanNode> q = new PriorityQueue<HuffmanNode>(new NodeComparator());
        
        for(int i = 0; i < n; i++){
            q.add(new HuffmanNode(s.charAt(i), f[i]));
        }
        
        HuffmanNode node1, node2;
        while(q.size() != 1){
            node1 = q.poll();
            node2 = q.poll();
            HuffmanNode combinedNode = new HuffmanNode('$', node1.weight + node2.weight);
            combinedNode.left = node1;
            combinedNode.right = node2;
            q.add(combinedNode);
        }
        
        HuffmanNode root = q.poll();
        
        ArrayList<String> resultCollection = new ArrayList<String>();
        
        fetchAllEncodes(root, "", resultCollection);
        
        return resultCollection;
    }
}