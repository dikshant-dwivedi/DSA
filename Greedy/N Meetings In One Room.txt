c++ solution

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution
{
    public:
    
    static bool compareEndTimes(pair<int, int> p1, pair<int, int> p2){
        if(p1.second != p2.second){
            return p1.second < p2.second;
        }
        return p1.first < p2.first;
    }
    
    //Function to find the maximum number of meetings that can
    //be performed in a meeting room.
    int maxMeetings(int start[], int end[], int n)
    {
        // Your code here
        /**
        We want the meetings to end at the earliest time, that way we can start
        next meeting as soon as possible. Hence, we will start counting from the
        meetings with the earlist finishing time
        */
        
        vector<pair<int,int>> meetings;
        for(int i = 0; i < n; i++){
            meetings.push_back({start[i], end[i]});
        }
        
        sort(meetings.begin(), meetings.end(), compareEndTimes);
        
        int maxMeetings = 1;
        int currFinishingTime = meetings[0].second;
        for(int i = 0; i < n; i++){
            if(currFinishingTime < meetings[i].first){
                maxMeetings++;
                currFinishingTime = meetings[i].second;
            }
        }
        
        return maxMeetings;
    }
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        int start[n], end[n];
        for (int i = 0; i < n; i++) cin >> start[i];

        for (int i = 0; i < n; i++) cin >> end[i];

        Solution ob;
        int ans = ob.maxMeetings(start, end, n);
        cout << ans << endl;
    }
    return 0;
}
// } Driver Code Ends

Java Solution

//{ Driver Code Starts
import java.io.*;
import java.util.*;
import java.lang.*;

class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine().trim());

        while (t-- > 0) {
            String inputLine[] = br.readLine().trim().split(" ");
            int n = Integer.parseInt(inputLine[0]);

            int start[] = new int[n];
            int end[] = new int[n];

            inputLine = br.readLine().trim().split(" ");
            for (int i = 0; i < n; i++)
                start[i] = Integer.parseInt(inputLine[i]);

            inputLine = br.readLine().trim().split(" ");
            for (int i = 0; i < n; i++) 
                end[i] = Integer.parseInt(inputLine[i]);
                
            int ans = new Solution().maxMeetings(start, end, n);
            System.out.println(ans);
        }
    }
}

// } Driver Code Ends

class Pair{
    int start;
    int end;
    Pair(int s, int e){
        start = s;
        end = e;
    }
}

class MeetingsComparator implements Comparator<Pair> {
    public int compare(Pair p1, Pair p2){
        if(p1.end != p2.end){
            return p1.end - p2.end;
        }
        return p1.start - p2.start;
    }
}

class Solution 
{
    //Function to find the maximum number of meetings that can
    //be performed in a meeting room.
    public static int maxMeetings(int start[], int end[], int n)
    {
        // add your code here
        ArrayList<Pair> meetings = new ArrayList<Pair>();
        for(int i = 0; i < n; i++){
            meetings.add(new Pair(start[i], end[i]));
        }
        
        Collections.sort(meetings, new MeetingsComparator());
        
        int maxMeetings = 1;
        int currFinishingTime = meetings.get(0).end;
        for(int i = 1; i < n; i++){
            if(currFinishingTime < meetings.get(i).start){
                maxMeetings++;
                currFinishingTime = meetings.get(i).end;
            }
        }
        
        return maxMeetings;
    }
}
