https://youtu.be/oTTzNMHM05I

C++ Solution

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

struct Item{
    int value;
    int weight;
};


// } Driver Code Ends
//class implemented
/*
struct Item{
    int value;
    int weight;
};
*/


class Solution
{
    public:
    
    static bool compareItem(Item i1, Item i2){
        return (double)i1.value/(double)i1.weight > (double)i2.value/(double)i2.weight;
    }
    
    //Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int W, Item arr[], int n)
    {
        // Your code here
        sort(arr, arr + n, compareItem);
        
        double profit = 0.0;
        for(int i = 0; i < n; i++){
            if(arr[i].weight <= W){
                profit += arr[i].value;
                W -= arr[i].weight;
            }
            else{
                profit += W * (double)arr[i].value / (double)arr[i].weight;
                break;
            }
        }
        
        return profit;
    }
        
};


//{ Driver Code Starts.
int main()
{
	int t;
	//taking testcases
	cin>>t;
	cout<<setprecision(2)<<fixed;
	while(t--){
	    //size of array and weight
		int n, W;
		cin>>n>>W;
		
		Item arr[n];
		//value and weight of each item
		for(int i=0;i<n;i++){
			cin>>arr[i].value>>arr[i].weight;
		}
		
		//function call
		Solution ob;
		cout<<ob.fractionalKnapsack(W, arr, n)<<endl;
	}
    return 0;
}
// } Driver Code Ends

Java Solution

//{ Driver Code Starts
import java.io.*;
import java.lang.*;
import java.util.*;

class Item {
    int value, weight;
    Item(int x, int y){
        this.value = x;
        this.weight = y;
    }
}

class GfG {
    
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(br.readLine().trim());
		while(t-->0){
            String inputLine[] = br.readLine().trim().split(" ");
            int n = Integer.parseInt(inputLine[0]);
            int w = Integer.parseInt(inputLine[1]);
            Item[] arr = new Item[n];
            inputLine = br.readLine().trim().split(" ");
            for(int i=0, k=0; i<n; i++){
                arr[i] = new Item(Integer.parseInt(inputLine[k++]), Integer.parseInt(inputLine[k++]));
            }
            System.out.println(String.format("%.2f", new Solution().fractionalKnapsack(w, arr, n)));
        }
    }
}
// } Driver Code Ends


/*
class Item {
    int value, weight;
    Item(int x, int y){
        this.value = x;
        this.weight = y;
    }
}
*/

class ItemComparator implements Comparator<Item>{
    public int compare(Item i1, Item i2){
        Double r1 = new Double((double) i1.value / (double) i1.weight);
        Double r2 = new Double((double) i2.value / (double) i2.weight);
        /*
            swapping takes place when 1 is returned
            a.compareTo(b) returns 1 when a is greater than b
            here, we want swapping to happen when i2 ratio is greater than i1 ratio
        */
        return r2.compareTo(r1);
    }
}

class Solution
{
    //Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int W, Item arr[], int n) 
    {
        // Your code here
        Arrays.sort(arr, new ItemComparator());
        
        double profit = 0.0;
        for(int i = 0; i < n; i++){
            if(arr[i].weight <= W){
                W -= arr[i].weight;
                profit += arr[i].value;
            }
            else{
                profit += W * (double)arr[i].value/(double)arr[i].weight;
                break;
            }
        }
        
        return profit;
    }
}